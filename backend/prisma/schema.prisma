// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

// Người dùng hệ thống
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  ORGANIZER
  REFEREE
  USER
}

// Giải đấu
model Tournament {
  id              String    @id @default(uuid())
  name            String    @unique
  year            Int
  description     String?   @db.Text
  startDate       DateTime
  endDate         DateTime
  status          TournamentStatus @default(PREPARING)
  logo            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Quan hệ
  teams           Team[]
  matches         Match[]
  
  @@map("tournaments")
}

enum TournamentStatus {
  PREPARING
  ONGOING
  COMPLETED
  CANCELLED
}

// Đội bóng
model Team {
  id              String    @id @default(uuid())
  name            String
  shortName       String?   @db.VarChar(10)  // Tên viết tắt
  logo            String?
  homeColor       String?   // Màu áo sân nhà
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // Quan hệ
  tournamentId    String
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  players         Player[]
  homeMatches     Match[]   @relation("HomeTeam")
  awayMatches     Match[]   @relation("AwayTeam")
  standings       Standing[]
  
  @@unique([name, tournamentId])
  @@map("teams")
}

// Cầu thủ
model Player {
  id              String    @id @default(uuid())
  name            String
  number          Int       // Số áo
  position        PlayerPosition
  birthDate       DateTime
  nationality     String
  image           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Quan hệ
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  goals           Goal[]
  
  @@map("players")
}

enum PlayerPosition {
  GOALKEEPER      // Thủ môn
  DEFENDER        // Hậu vệ
  MIDFIELDER      // Tiền vệ
  FORWARD         // Tiền đạo
}

// Trận đấu
model Match {
  id              String    @id @default(uuid())
  matchday        Int       // Vòng đấu
  date            DateTime  // Ngày thi đấu
  time            String?   // Giờ thi đấu (format: "HH:MM")
  status          MatchStatus @default(SCHEDULED)
  homeScore       Int?      // Bàn thắng đội nhà
  awayScore       Int?      // Bàn thắng đội khách
  highlights      String?   // Link video tóm tắt trận đấu
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Quan hệ
  tournamentId    String
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  homeTeamId      String
  homeTeam        Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId      String
  awayTeam        Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  goals           Goal[]
  
  @@map("matches")
}

enum MatchStatus {
  SCHEDULED       // Lên lịch
  LIVE            // Đang diễn ra
  FINISHED        // Đã kết thúc
  POSTPONED       // Hoãn lại
  CANCELLED       // Hủy bỏ
}

// Bàn thắng
model Goal {
  id              String    @id @default(uuid())
  minute          Int       // Phút ghi bàn
  type            GoalType  @default(NORMAL)
  isOwnGoal       Boolean   @default(false)
  isPenalty       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Quan hệ
  matchId         String
  match           Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  scorerId        String
  scorer          Player    @relation(fields: [scorerId], references: [id])
  
  @@map("goals")
}

enum GoalType {
  NORMAL          // Bàn thắng thường
  OWN_GOAL        // Bàn phản lưới nhà
  PENALTY         // Phạt đền
  FREE_KICK       // Đá phạt
  HEADER          // Đánh đầu
}

// Bảng xếp hạng
model Standing {
  id              String    @id @default(uuid())
  position        Int       // Vị trí xếp hạng
  played          Int       @default(0) // Số trận đã đấu
  won             Int       @default(0) // Số trận thắng
  drawn           Int       @default(0) // Số trận hòa
  lost            Int       @default(0) // Số trận thua
  goalsFor        Int       @default(0) // Số bàn thắng ghi được
  goalsAgainst    Int       @default(0) // Số bàn thắng thủng lưới
  goalDifference  Int       @default(0) // Hiệu số bàn thắng
  points          Int       @default(0) // Điểm số
  form            String?   // Phong độ gần đây (e.g. "WDLWW")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Quan hệ
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tournamentId    String
  
  @@unique([teamId, tournamentId])
  @@map("standings")
}